== Description ==
	A AString is an object that handles the memory management of a C string for you. You can think of it as similar to a Java StringBuffer. In addition to the string itself, GString stores the length of the string, so can be used for binary data with embedded nul bytes. To access the C string managed by the AString string, simply use string->str.


== Details ==

=== Types ===
typedef unsigned long asize;
typedef unsigned int aunichar;
typedef unsigned char aboolean;
typedef unsigned int auint;
typedef unsigned char auchar;

=== Struct ===
struct AString {
	auchar flag;
	volatile aboolean lock;
	char *str;
	asize len;
	asize allocated_len;
};

The AString struct contains the public fields of a AString.

	auchar flag         :Don't Change it, it used to check a object is AString.
	aboolean lock       :Don't Change it, it used to keep thread safe.
	char *str           :points to the character data.
	asize len           :contains the length of the string, not including the terminating nul byte.
	asize allocated_len :the number of bytes that can be stored in the string before it needs to be reallocated. May be larger than len.


=== Function ===
AString *      astring_new                   (const char *init);
	Create a new AString, initialized with the given string.
	
	init      :the initial text to copy into the string
	Returns   :the new AString


AString *      astring_new_len               (const char *init, 
                                              asize len);
	Create a new AString with len length.
	if strlen(init) is larger than len, the length of new string will be len, otherwise the length will be strlen(init)

	init      :the initial text to copy into the string
	len       :the max length
	Returns   :the new AString

AString *      astring_sized_new             (asize size);
	Create a new AString with size allocated_len
	This is useful if you are going to add a lot of text to the string and don't want it to be reallocated too often.

	size      :the default size of the space allocated to hold the string
	Returns   :the new AString


AString *      astring_assign                (AString *string,
                                              const char * value);
	Copies the bytes from a string into an AString, destroying any previous contents. It is rather like the standard strcpy() function, except that you do not have to worry about having enough space to copy the string.
	string    :the destination AString. Its current contents are destroyed.	
	value     :the string to copy into string
	Returns   :string

AString *      astring_dump                  (AString *source);
	duplicate an AString.

	source    :the source AString.
	Returns   :the new AString

char    *      astring_dumpstr               (AString *source);
	duplicate char * from an AString.
	You should free the return string when you don't want to use it.
	When you just want the string to print or view, not change it, you can use source->str instead.

	source    :the source AString.
	Returns   :the new AString

AString *      astring_get_file_content	     (const char * filename);
	Create a new AString from a file.
	
	filename  :the file you need to read.
	Returns   :the new AString

AString *      astring_append                (AString *string,
                                              const char *value);

AString *      astring_append_c              (AString *string,
                                              char c);

AString *      astring_append_unichar        (AString *string,
                                              aunichar wc);

AString *      astring_append_len            (AString *string,
                                              const char *value,
                                              asize len);

AString *      astring_prepend               (AString *string,
                                              const char *value);

AString *      astring_prepend_c             (AString *string,
                                              char c);

AString *      astring_prepend_unichar       (AString *string,
                                              aunichar wc);

AString *      astring_prepend_len           (AString *string,
                                              const char *value,
                                              asize len);						

AString *      astring_insert                (AString *string,
                                              asize pos,
                                              const char *value);

AString *      astring_insert_c              (AString *string,
                                              asize pos,
                                              char c);

AString *      astring_insert_unichar        (AString *string,
                                              asize pos,
                                              aunichar wc);

AString *      astring_insert_len            (AString *string,
                                              asize pos,
                                              const char *value,
                                              asize len);	
						
AString *      astring_overwrite             (AString *string,
                                              asize pos,
                                              const char *value);

AString *      astring_overwrite_len         (AString *string,
                                              asize pos,
                                              const char *value,
                                              asize len);

AString *      astring_erase                 (AString *string,
                                              asize pos,
                                              asize len);
											  

AString *      astring_truncate              (AString *string,
                                              asize len);
											  
AString *      astring_set_size              (AString *string,
                                              asize len);

AString *      astring_trim                  (AString *string);

AString *      astring_substring             (AString *string, asize start, asize end);

AString *      astring_substring_new	     (AString *string, asize start, asize end);

char           astring_get_char	             (AString *string, asize position);

AString *      astring_set_char	             (AString *string, asize position, char ch);

int 	       astring_find                  (AString *string,
                                              char *str,
                                              asize position);

int            astring_replace               (AString *string,
                                              char *findstr,
                                              char *replacestr,
                                              asize position);

int            astring_replace_all           (AString *string,
                                              char *findstr,
                                              char *replacestr);

void           astring_free                  (AString *string);

auint          astring_hash                  (AString *string);


aboolean       astring_equal                 (AString *string,
                                              AString *string2);